// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
using TrueSync;
///<<< END WRITING YOUR CODE

public class YeGuaiAI : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE YeGuaiAI
///<<< END WRITING YOUR CODE
{
	public void Attack()
	{
///<<< BEGIN WRITING YOUR CODE Attack
		if (ShowLog) Debug.Log("Attack==>");
		if (TrueSyncManager.Ticks % 30 == 0) {
			//yeguaiBullet mYeGuaiBullet = WillUsedPrefabs[0].GetComponent<yeguaiBullet>();
			//mYeGuaiBullet.mTargetEnemyActor = _TargetEnemyActor;
			GameObject yeguaibullet_prefab = TrueSyncManager.SyncedInstantiate(WillUsedPrefabs[0], new TSVector(AllTSTransform.position.x, 0, AllTSTransform.position.z), TSQuaternion.identity);
			yeguaibullet_prefab.SetActive(true);
			yeguaiBullet mYeGuaiBullet = yeguaibullet_prefab.GetComponent<yeguaiBullet>();
			mYeGuaiBullet.mTargetEnemyActor = _TargetEnemyActor;
		}
///<<< END WRITING YOUR CODE
	}

	public behaviac.EBTStatus BackHome()
	{
///<<< BEGIN WRITING YOUR CODE BackHome
		if (ShowLog) Debug.Log("BackHome==>");
		TSVector Angle = (mBackPosition - AllTSTransform.position).normalized;
		FP Distance = (mBackPosition - AllTSTransform.position).magnitude;
		if (Distance <= 1)
		{
			AllTSTransform.position = new TSVector(mBackPosition.x, mBackPosition.y, mBackPosition.z);
			_TargetEnemyActor = null;
			mEnemyActorDict = new Dictionary<int, Actor>();//清空
			mActorAttr.Hp = mActorAttr.HpMax;
			return behaviac.EBTStatus.BT_SUCCESS;
		}
		else {
			AllTSTransform.Translate(Angle * Speed * 2);
			RotateTSTransform.rotation = TSQuaternion.LookRotation(Angle);
			mActorAttr.Hp += 1;
		}
        return behaviac.EBTStatus.BT_RUNNING;
///<<< END WRITING YOUR CODE
	}

	public behaviac.EBTStatus FindEnmey()
	{
///<<< BEGIN WRITING YOUR CODE FindEnmey
		//if (ShowLog) Debug.Log("FindEnmey==>");
		if (mEnemyActorDict.Count>0)
        {
			FP NearestDistance = 0;
			int NearestActorID = -1;
			foreach (KeyValuePair<int, Actor> kv in mEnemyActorDict) { 
				Actor mEnemyActor = kv.Value;
				if (mEnemyActor.IsDeath) {
					_TargetEnemyActor = mEnemyActor;//虽然死亡,但是如果没有活着的其他敌人,这里还是需要选择到这个死亡的敌人,方便下面判断是否脱离战斗返回原地
					continue;
				}
				FP Distance = (mEnemyActor.AllTSTransform.position - AllTSTransform.position).magnitude;
				if (Distance > NearestDistance) {
					NearestDistance = Distance;
					NearestActorID = kv.Key;
				}
			}
			if (NearestActorID != -1)
			{
				_TargetEnemyActor = mEnemyActorDict[NearestActorID];
				if (ShowLog) Debug.LogFormat("FindEnmey==>{0},{1}", NearestDistance, NearestActorID);
				return behaviac.EBTStatus.BT_SUCCESS;
			}
			else if (_TargetEnemyActor != null)
			{
				return behaviac.EBTStatus.BT_SUCCESS;
			}
        }
        return behaviac.EBTStatus.BT_RUNNING;
///<<< END WRITING YOUR CODE
	}

	public behaviac.EBTStatus IsOutRang()
	{
///<<< BEGIN WRITING YOUR CODE IsOutRang
		//if (ShowLog) Debug.Log("IsOutRang==>");
		//和目标距离过远
		FP Distance = (_TargetEnemyActor.AllTSTransform.position - AllTSTransform.position).magnitude;
		if (Distance > OutRangDistance)	
        {
			if (ShowLog) Debug.Log("IsOutRang==>和目标距离过远");
            return behaviac.EBTStatus.BT_SUCCESS;
        }
		//和原位置过远
		FP Distance2 = (mBackPosition - AllTSTransform.position).magnitude;
		if (Distance2 > BackPosition)
		{
			if (ShowLog) Debug.Log("IsOutRang==>和原位置过远");
			return behaviac.EBTStatus.BT_SUCCESS;
		}
		
		//目标已死亡,且无第二优先级目标
		if (_TargetEnemyActor.IsDeath) {
			if (mEnemyActorDict.Count > 0)
			{
				FP NearestDistance = 0;
				int NearestActorID = -1;
				foreach (KeyValuePair<int, Actor> kv in mEnemyActorDict)
				{
					Actor mEnemyActor = kv.Value;
					if (mEnemyActor.IsDeath) continue;
					FP Distance3 = (mEnemyActor.AllTSTransform.position - AllTSTransform.position).magnitude;
					if (Distance3 > NearestDistance)
					{
						NearestDistance = Distance;
						NearestActorID = kv.Key;
					}
				}
				if (NearestActorID != -1)
				{
					_TargetEnemyActor = mEnemyActorDict[NearestActorID];
					if (ShowLog) Debug.LogFormat("IsOutRang==>{0},{1}", NearestDistance, NearestActorID);
					return behaviac.EBTStatus.BT_FAILURE;
				}
				else
				{
					if (ShowLog) Debug.Log("IsOutRang==>目标已死亡,且无第二优先级目标");
					//_TargetEnemyActor = null;
					return behaviac.EBTStatus.BT_SUCCESS;
				}
			} 
		}
		
		return behaviac.EBTStatus.BT_FAILURE;
///<<< END WRITING YOUR CODE
	}

	public bool PursuitOrAttack()
	{
///<<< BEGIN WRITING YOUR CODE PursuitOrAttack
		if (ShowLog) Debug.Log("PursuitOrAttack==>");
		TSVector Angle = (_TargetEnemyActor.AllTSTransform.position - AllTSTransform.position);
		FP Distance = Angle.magnitude;
		RotateTSTransform.rotation = TSQuaternion.LookRotation(Angle);
		if (Distance <= AttackDistance)
        {
            return true;//攻击
        }
        return false;//追击
///<<< END WRITING YOUR CODE
	}

	public void Pursuit()
	{
///<<< BEGIN WRITING YOUR CODE Pursuit
		if (ShowLog) Debug.Log("Pursuit==>");
		TSVector Angle = (_TargetEnemyActor.AllTSTransform.position - AllTSTransform.position).normalized;
		AllTSTransform.Translate(Angle * Speed);
		RotateTSTransform.rotation = TSQuaternion.LookRotation(Angle);
///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART
	public bool ShowLog = false;
	/// <summary>
	/// 这个Actor身上所有的属性
	/// </summary>
	public ActorAttr mActorAttr = new ActorAttr();

	/// <summary>
	/// 这个Actor身上所有的Buff
	/// </summary>
	public ActorBuffManager mActorBuffManager = new ActorBuffManager();

	public uint Id { set; get; }

	public GameObject[] WillUsedPrefabs; 

	private Dictionary<int,Actor> mEnemyActorDict;   //攻击了自己的所有敌人集合
	private Actor _TargetEnemyActor;		//选出来目标敌人
	public TSVector mBackPosition = TSVector.up;

	public FP AttackDistance = (FP)5;
	public FP OutRangDistance = (FP)10;
	public FP BackPosition = (FP)15;

	/// <summary>
	/// 模型
	/// </summary>
	private GameObject mActorObj;
	public GameObject ActorObj
	{
		get
		{
			if (mActorObj == null)
				mActorObj = transform.Find("rotate/actor").gameObject;
			return mActorObj;
		}
	}

	private Animation mActorAnimation;
	/// <summary>
	/// 动画播放控件(控制一个动画的播放)
	/// </summary>
	public Animation ActorAnimation
	{
		get
		{
			if (mActorAnimation == null)
				mActorAnimation = ActorObj.GetComponent<Animation>();
			return mActorAnimation;
		}
	}

	private TSTransform mRotateTSTransform;
	public TSTransform RotateTSTransform
	{
		get
		{
			if (mRotateTSTransform == null)
			{
				mRotateTSTransform = transform.Find("rotate").transform.GetComponent<TSTransform>();
			}
			return mRotateTSTransform;
		}
	}

	private TSTransform mAllTSTransform;
	public TSTransform AllTSTransform
	{
		get
		{
			if (mAllTSTransform == null)
			{
				mAllTSTransform = GetComponent<TSTransform>();
			}
			return mAllTSTransform;
		}
	}

	behaviac.EBTStatus _status = behaviac.EBTStatus.BT_RUNNING;

	void Awake()
    {
		ShowLog = false;
        InitBehavic();
        InitPlayer();
		InitWillUsedPrefabs();
    }

    private bool InitBehavic()
    {
		if (ShowLog) Debug.Log("InitBehavic======>" + ExportedFilePath);
        behaviac.Workspace.Instance.FilePath = ExportedFilePath;
        behaviac.Workspace.Instance.FileFormat = behaviac.Workspace.EFileFormat.EFF_xml;

        return true;
    }

    private static string ExportedFilePath
    {
        get
        {
            string relativePath = "/Resources/BehaviorsExported";// 
            if (Application.platform == RuntimePlatform.WindowsEditor)
            {
                return Application.dataPath + relativePath;
            }
            else if (Application.platform == RuntimePlatform.WindowsPlayer)
            {
                return Application.dataPath + relativePath;
            }
            else
            {
                return "Assets" + relativePath;
            }
        }
    }

    private bool InitPlayer()
    {
		if (ShowLog) Debug.Log("InitPlayer===========");

        bool bRet = this.btload("YeGuaiAI");
        if (bRet)
        {
            this.btsetcurrent("YeGuaiAI");
        }
		mEnemyActorDict = new Dictionary<int,Actor>();
		mActorAttr.HpMax = (FP)100;
		mActorAttr.Hp = (FP)100;
		mActorAttr.Name = "野怪";
		mActorAttr.Speed = (FP)0.05f;
        return bRet;
    }

	/// <summary>
	/// 初始化可能被频繁用到的预制体(因为常用,让他一直在内存里)
	/// </summary>
	protected void InitWillUsedPrefabs()
	{
		BloodStrip bloodStrip = transform.gameObject.AddComponent<BloodStrip>();
		bloodStrip.InitBloodStrip(mActorAttr);
		WillUsedPrefabs = new GameObject[3];
		WillUsedPrefabs[0] = _AssetManager.GetGameObject("prefab/effect/bullet/yeguaibullet_prefab");
		WillUsedPrefabs[0].SetActive(false);
	}

	public override void OnSyncedUpdate()
    {
        if (_status == behaviac.EBTStatus.BT_RUNNING)
        {
			if (ShowLog) Debug.LogWarning("Update===============================================");
            _status = this.btexec();
        }
		AllTSTransform.OnUpdate();
		RotateTSTransform.OnUpdate();
    }

	public void AddHp(int hp, int ownerIndex)
	{
		mActorAttr.Hp -= 10;
		Actor mEnemyActor = TrueSyncManager.Instance.GetActor((uint)ownerIndex);
		if (mEnemyActor == null)
		{
			if (ShowLog) Debug.LogWarning("AddHp==>no EnemyActor");
		}
		else {
			if (!mEnemyActorDict.ContainsKey(ownerIndex))
			{
				mEnemyActorDict[ownerIndex] = mEnemyActor;
			}
		}
	}

	#region 位置相关
	public bool IsMove { get; set; }

	public FP Speed
	{
		set
		{
			mActorAttr.Speed = value;
		}
		get
		{
			return mActorAttr.Speed;
		}
	}

	public TSVector Angle { set; get; }
	#endregion 位置相关

	#region TrueSyncBehaviour操作相关
	public override void OnSyncedStart()
	{
		if (true) Debug.LogErrorFormat("YeGuaiAI====>OnSyncedStart");
	}

	public void OnSyncedCollisionEnter(TSCollision other)
	{
		other.gameObject.GetComponent<Renderer>().material.color = Color.gray;
		if (ShowLog) Debug.LogErrorFormat("YeGuaiAI====>Collision   Enter==>{0}", other.gameObject.name);
	}

	public void OnSyncedCollisionStay(TSCollision other)
	{
		if (ShowLog) Debug.LogErrorFormat("YeGuaiAI====>Collision   Stay==>{0}", other.gameObject.name);
	}

	public void OnSyncedCollisionExit(TSCollision other)
	{
		other.gameObject.GetComponent<Renderer>().material.color = Color.blue;
		if (ShowLog) Debug.LogErrorFormat("YeGuaiAI====>Collision   Exit==>{0}", other.gameObject.name);
	}

	public void OnSyncedTriggerEnter(TSCollision other)
	{
		if (ShowLog) Debug.LogErrorFormat("YeGuaiAI====>Trigger  Enter==>{0}", other.gameObject.name);
	}

	public void OnSyncedTriggerStay(TSCollision other)
	{
		if (ShowLog) Debug.LogErrorFormat("YeGuaiAI====>Trigger  Stay==>{0}", other.gameObject.name);
	}

	public void OnSyncedTriggerExit(TSCollision other)
	{
		if (ShowLog) Debug.LogErrorFormat("YeGuaiAI====>Trigger  Exit==>{0}", other.gameObject.name);
	}

	#endregion TrueSyncBehaviour操作相关

///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

